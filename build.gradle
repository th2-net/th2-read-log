/*
 *  Copyright 2020-2021 Exactpro (Exactpro Systems Limited)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'java-library'
    id 'application'
    id 'com.palantir.docker' version '0.25.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
}

group 'com.exactpro.th2'
version release_version

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    mavenLocal()

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:4.0.1')
    api 'com.exactpro.th2:common:3.42.0-dev-3477755558-SNAPSHOT'
    api 'com.exactpro.th2:read-file-common-core:1.5.0-dev-SNAPSHOT'

    implementation('com.opencsv:opencsv:5.7.0') {
        because("we need to write a correct CSV in case of free pattern is used")
    }

    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    implementation "org.slf4j:slf4j-api"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.mockito:mockito-core:3.12.4'
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

description = 'DataReaderClient'
sourceCompatibility = JavaVersion.VERSION_11
applicationName = 'service'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = "11"
    }
}

distTar {
    archiveFileName.set("${applicationName}.tar")
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

application {
    mainClass.set("com.exactpro.th2.readlog.Main")
}
